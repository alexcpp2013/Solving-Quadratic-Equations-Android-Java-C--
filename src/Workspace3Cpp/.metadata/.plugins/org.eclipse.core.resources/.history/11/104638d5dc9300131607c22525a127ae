#include <Solving.h>

JNIEXPORT void Java_ru_suvitruf_androidndk_AndroidNDK_SetString(JNIEnv * env, jobject obj, jstring str){
	jboolean isCopy;
	const char * Str;
	Str = env->GetStringUTFChars(str, &isCopy);
	strcpy(MyStr,Str);
	LOGI("string = \"%s\"", MyStr);
}

void ChangeStr(char* tmp){
	strcat(MyStr, tmp);
}

template <typename T>
void TypeToStr(const T &rhs){
    const int N = 15;
	char tmp[N];
	sprintf(MyStr,"%d", rhs);
}

JNIEXPORT void Java_ru_suvitruf_androidndk_AndroidNDK_ChangeString(JNIEnv * env, jobject obj){
	ChangeStr("1");
	LOGI("string after change = \"%s\"", MyStr);
}

JNIEXPORT jstring Java_ru_suvitruf_androidndk_AndroidNDK_GetString(JNIEnv * env, jobject obj){
	LOGI("returned string = \"%s\"", MyStr);
	return env->NewStringUTF(MyStr);
}

JNIEXPORT jstring Java_ru_suvitruf_androidndk_AndroidNDK_Solving(JNIEnv * env, jobject obj, jdouble a, jdouble b, jdouble c)
{
	LOGI("Start GetData");

	double x1 = 0.0, x2 = 0.0;
	double det = 0.0;

	if(a == 0 && b == 0)
		ChangeStr("Not a valid equation");

	if(a == 0 && b != 0)
	{
		double x = -(c / b);
		TypeToStr<double>(x);
	}

	det = b * b - 4 * a * c;
	if (det >= 0)
	{
		if(det == 0)
		{
			double x = -(b / (2 * a));
			TypeToStr<double>(x);
		}
		else
		{
			;
		}
	}
	if (det < 0)
		ChangeStr("Not a real root");

	LOGI("End GetData");
	return env->NewStringUTF(MyStr);
}
